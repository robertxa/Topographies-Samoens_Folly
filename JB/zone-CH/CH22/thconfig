encoding  utf-8
 
 source CH22.th
 source CH22.th2
 source CH22-coupe.th2
  
# Debut de la definition du Layout "xviexport"
layout xviexport
  # echele auquel on veut faire la topo
  scale 1 1000
  # taille de la grille
  grid-size 10 10 10 m
  # mettre la grille en arrière plan
  grid bottom
endlayout
# fin de la définition du layout "xviexport"
 
  
 layout my_layout
 doc-title "CH22"
  cs UTM32
  base-scale 1 1000
  scale 1 1000
  scale-bar 50 m
 # origin 12 22 0 m
 # origin-label 100 K
 # exclude-pages on 1,2,5
#  color map-bg 85
  color map-fg [100 100 80]
  transparency on
  opacity 90
  language fr
  doc-author "Xavier Robert"
  map-comment "Plan, Projection UTM32, Samoëns, 74, France"
  statistics topo-length off
  statistics explo-length off
  statistics copyright all
  legend on
  # map-header 5 50 e
  map-header 0 0 nw
 # symbol-hide point station        
  symbol-hide line survey
  map-header-bg off
  layers on
  symbol-assign point station:temporary SKBB
    symbol-color point water-flow [0 0 100]
  symbol-color line water-flow [0 0 100]
#  debug station-names
 # grid bottom
 # grid-size 100 100 100 m
  
  # Taille des blocs : Modifier la taille des blocs en fonction de la taille de la topo
code metapost
  def a_blocks (expr p) =
    T:=identity;
    pickup PenC;
    path q, qq; q = bbox p;
    picture tmp_pic; 
    uu := max(u, (xpart urcorner q - xpart llcorner q)/100, (ypart urcorner q - ypart     llcorner q)/100);
    tmp_pic := image(
      for i = xpart llcorner q step 1.0uu until xpart urcorner q:
        for j = ypart llcorner q step 1.0uu until ypart urcorner q:
          qq := punked (((-.3uu,-.3uu)--(.3uu,-.3uu)--(.3uu,.3uu)--(-.3uu,.3uu)--cycle) 
         randomized (uu/2))
               rotated uniformdeviate(360) 
               shifted ((i,j) randomized 1.0uu);
    if xpart (p intersectiontimes qq) < 0:
      thclean qq;
      thdraw qq;
    fi;
        endfor;  
      endfor;
    );
    clip tmp_pic to p;
    draw tmp_pic;
  enddef;


#sable
def a_sands (expr p) =
    T:=identity;
    pickup PenC;
    path q; q = bbox p;
    picture tmp_pic;
    tmp_pic := image(
      for i = xpart llcorner q step 0.1u until xpart urcorner q:
        for j = ypart llcorner q step 0.1u until ypart urcorner q:
          draw origin shifted ((i,j) randomized 0.1u) withpen PenC;
        endfor;
      endfor;
    );
    #clip tmp_pic to p;
    draw tmp_pic;
  enddef;

#pebbles
#def a_pebbles_SKBB (expr p) =
#  T:=identity;
#  pickup PenC;
#  path q, qq; q = bbox p;
#  picture tmp_pic; 
#  tmp_pic := image(
#    for i = xpart llcorner q step .1u until xpart urcorner q:
#      for j = ypart llcorner q step .5u until ypart urcorner q:
#        qq := (superellipse((.07u,0),(0,.03u),(-.07u,0),(0,.-.03u),.75))
#%             randomized (u/25)
#             rotated uniformdeviate(360) 
#             shifted ((i,j) randomized 0.27u);
#	if xpart (p intersectiontimes qq) < 0:
#	  thdraw qq;
#	fi;
#      endfor;  
#    endfor;
#  );
#  clip tmp_pic to p;
#  draw tmp_pic;
#enddef;





#pente
   def l_slope (expr P,S)(text Q) = 
 %show Q;
T:=identity;
numeric dirs[];
numeric lengths[];
for i=Q:
  dirs[redpart i]:=greenpart i;
  lengths[redpart i]:=bluepart i;
endfor;  
li:=length(P); % last
alw_perpendicular:=true;
for i=0 upto li:
  if unknown dirs[i]: dirs[i]:=-1; 
  else: 
    if dirs[i]>-1:
      dirs[i]:=((90-dirs[i]) - angle(thdir(P,i))) mod 360; 
      alw_perpendicular:=false;
    fi;
  fi;
  if unknown lengths[i]: lengths[i]:=-1; fi;
endfor;
  %for i=0 upto li: show dirs[i]; endfor;
ni:=0; % next
pi:=0; % previous
for i=0 upto li:
  d:=dirs[i];
  if d=-1:
    if (i=0) or (i=li):
      dirs[i] := angle(thdir(P,i) rotated 90) mod 360;
pi:=i;
    else:
      if ni<=i:
  for j=i upto li:
          ni:=j;
    exitif dirs[j]>-1;
  endfor;
fi;
w:=arclength(subpath(pi,i) of P) / 
   arclength(subpath(pi,ni) of P);
dirs[i]:=w[dirs[pi],dirs[ni]];
   %        if (dirs[i]-angle(thdir(P,i))) mod 360>180:
   %          dirs[i]:=w[dirs[ni],dirs[pi]];
   %	  message("*******");
   %        fi;
   fi;
  else:
    pi:=i;
  fi;
endfor;
  %for i=0 upto li: show dirs[i]; endfor;
ni:=0; % next
pi:=0; % previous
for i=0 upto li:
  l:=lengths[i];
  if l=-1:
    if (i=0) or (i=li):
      lengths[i] := 1cm; % should never happen!
thwarning("slope width at the end point not specified");
pi:=i;
    else:
      if ni<=i:
  for j=i+1 upto li:
          ni:=j;
    exitif lengths[j]>-1;
  endfor;  
fi;
w:=arclength(subpath(pi,i) of P) /   
   arclength(subpath(pi,ni) of P);
lengths[i]:=w[lengths[pi],lengths[ni]];
pi:=i;
    fi;
  else:
    pi:=i;
  fi;
endfor;
  % for i=0 upto li: show lengths[i]; endfor;
T:=identity;
boolean par;
cas := 0.3u;
krok := 0.7u;
dlzka := (arclength P);
if dlzka>3u: dlzka:=dlzka-0.6u fi;
mojkrok:=adjust_step(dlzka,1.4u) / 5;
pickup PenD;
par := false; 
forever:
  t := arctime cas of P;
  if t mod 1>0:  % not a key point
    w := (arclength(subpath(floor t,t) of P) / 
          arclength(subpath(floor t,ceiling t) of P));
    if alw_perpendicular:
      a := 90;
    else:
      a := w[dirs[floor t],dirs[ceiling t]];
    fi;
    l := w[lengths[floor t],lengths[ceiling t]];
  else:
    if alw_perpendicular:
      a := 90;
    else:
      a:= dirs[t];
    fi; 
    l:=lengths[t];
  fi;    
  a := a + angle(thdir(P,t));    
  thdraw (point t of P) -- 
    ((point t of P) + if par: 0.333 * fi l * unitvector(dir(a)));
  cas := cas + mojkrok;
  par := not par;
  exitif cas > dlzka + .3u + (krok / 3);  % for rounding errors
endfor;
if S = 1: pickup PenC; draw P fi;
   %pickup pencircle scaled 3pt;
   %for i=0 upto li: draw point i of P; endfor;
  enddef; 
  
  
   # Pour changer la couleur de l aire Sump
     def a_sump (expr p) =
       T:=identity;
       thfill p withcolor (0.0, 0.0, 0.3);
     enddef;
  
 # Pour changer la couleur de l aire Water    
     def a_water (expr p) =
       T:=identity;
       thfill p withcolor (0.0, 0.0, 0.1);
     enddef;
  
 # Northarrow more funnier !
    def s_northarrow (expr rot) =
     begingroup
       interim defaultscale:=0.7; % scale your north arrow here
       T:=identity scaled defaultscale rotated -rot;
       interim linecap:=squared;
         interim linejoin:=rounded;
      thfill (-.5cm,-.1cm)--(0,2.5cm)--(.5cm,-.1cm)--cycle;
       pickup pencircle scaled (0.08cm * defaultscale);
       thdraw (0,0)--(0,-2.5cm);
       pickup pencircle scaled (0.16cm * defaultscale);
       p:=(0.4cm,0.6cm);
       thdraw ((p--(p yscaled -1)--(p xscaled -1)--(p scaled -1)) shifted (0,-1.0cm));
       label.rt(thTEX("mg") scaled 1.6, (.6cm,-1.6cm)) transformed T;
     endgroup;
   enddef; 
  
 # Echelle
 def s_scalebar (expr l, units, txt) =
     begingroup
       interim warningcheck:=0;
       tmpl:=l / Scale * cm * units / 2;
       tmpx:=l / Scale * cm * units / 5;
       tmph:=5bp; % bar height
     endgroup;
     pickup PenC;
     draw (-tmpl,0)--(tmpl,0)--(tmpl,-tmph)--(-tmpl,-tmph)--cycle;
     p:=(0,0)--(tmpx,0)--(tmpx,-tmph)--(0,-tmph)--cycle;
     for i:=-2.5 step 2 until 2:
       fill p shifted (i * tmpx,0);
     endfor;
     begingroup
       interim labeloffset:=3.5bp;
       for i:=0 step (l/5) until (l-1):
         tmpx:=tmpl * (i * 2 / l - 1);
         label.bot(thTEX(decimal (i)),(tmpx,-tmph));
       endfor;
       label.bot(thTEX(decimal (l) & "\thinspace" & txt) ,(tmpl,-tmph));
       label.top(thTEX("Echelle 1 : " & decimal (Scale*100)),(0,0));
     endgroup;
   enddef;    

  
 # Titre          
     code tex-map
    % Output map title as determined by Therion 5.3 is stored in cavename. 
    % It will be empty if there are multiple maps selected for any one projection
    % AND there are multiple source surveys identified in the thconfig file 
    % ie Therion can not infer a unique title from the input data given.
    % This code allows you to define an output map title {cavename} if it happens to be empty
  
   \edef\temp{\the\cavename}   % cavename from Therion
   \edef\nostring{}            % empty string
   \ifx\temp\nostring          % test if cavename is empty
         % if empty reassign cavename to describe selected maps as a group
 		\cavename={CH22} 		
   \else % if not empty keep the value set by therion, or assign an override cavename here
   \fi
   endcode  

code metapost
  def p_altitude (expr pos) =
    T:=identity shifted pos;
    pickup PenD;
    p:=(-.3u,0)--(.3u,0);
    thdraw p; thdraw p rotated 90;
    p:=fullcircle scaled .2u;
    thclean p; thdraw p;
  enddef;
  
  vardef p_label@#(expr txt,pos,rot,mode) =
    if mode=1:
      thdrawoptions(withcolor .8red + .4blue);
      p_altitude(pos);
      % append "m" to label
      picture txtm;
      txtm:=image(
        draw txt;
        interim labeloffset:=0;
        label.urt(btex \thaltitude m etex, lrcorner txt);
      );
      % give extra offset in case of l/r/t/b alignment
      pair ctmp;
      ctmp:=center thelabel@#("x", (0,0));
      if (xpart ctmp * ypart ctmp)=0:
        interim labeloffset:=(.4u);
      else: % diagonal alignment
        interim labeloffset:=(.2u);
      fi;
      % draw label
      lab:=thelabel@#(txtm, pos);
      draw lab _thop_; % use color
      thdrawoptions();
      bboxmargin:=0.8bp;
      write_circ_bbox((bbox lab) smoothed 2);
    else:
      if mode=7: interim labeloffset:=(u/8) fi;
      lab:=thelabel@#(txt, pos);
      if mode>1: pickup PenD fi;
      if mode=2: process_uplabel;
      elseif mode=3: process_downlabel;
      elseif mode=4: process_updownlabel;
      elseif mode=5: process_circledlabel;
      elseif mode=6: process_boxedlabel;
      elseif mode=7: process_label(pos,rot);  % station name
      elseif mode=8: process_filledlabel(pos, rot);
      else: process_label(pos,rot); fi;
    fi;
  enddef;
endcode  
  
# For point height with P or C prefixe 
# use “point 0 0 height -value [+10 m]” 
# or “point 0 0 height -value [-85 m]” 
# in your data to get E10 or P85
code mpost
    verbatimtex \def\thheightpos{E}\def\thheightneg{P} etex 
  
 # Pour dessiner un cadre autour de la topo   
 code tex-map
   \framethickness=0.5mm
 endcode

  
#endcode



 endlayout
 
 
  layout my_layout-coupe
 doc-title "CH22 coupe"
  cs UTM32
  base-scale 1 1000
  scale 1 1000
  scale-bar 50 m
 # origin 12 22 0 m
 # origin-label 100 K
 # exclude-pages on 1,2,5
#  color map-bg 85
  color map-fg [100 100 80]
  transparency on
  opacity 90
  language fr
  doc-author "Xavier Robert"
  map-comment "Coupe, Samoëns, 74, France"
  statistics topo-length off
  statistics explo-length off
  statistics copyright all
  legend on
  # map-header 5 50 e
  map-header 0 0 nw
 # symbol-hide point station        
  symbol-hide line survey
  map-header-bg off
  layers on
  symbol-assign point station:temporary SKBB
  symbol-color point water-flow [0 0 100]
  symbol-color line water-flow [0 0 100]  
#  debug station-names
 # grid bottom
 # grid-size 100 100 100 m
  
  # Taille des blocs : Modifier la taille des blocs en fonction de la taille de la topo
code metapost
  def a_blocks (expr p) =
    T:=identity;
    pickup PenC;
    path q, qq; q = bbox p;
    picture tmp_pic; 
    uu := max(u, (xpart urcorner q - xpart llcorner q)/100, (ypart urcorner q - ypart     llcorner q)/100);
    tmp_pic := image(
      for i = xpart llcorner q step 1.0uu until xpart urcorner q:
        for j = ypart llcorner q step 1.0uu until ypart urcorner q:
          qq := punked (((-.3uu,-.3uu)--(.3uu,-.3uu)--(.3uu,.3uu)--(-.3uu,.3uu)--cycle) 
         randomized (uu/2))
               rotated uniformdeviate(360) 
               shifted ((i,j) randomized 1.0uu);
    if xpart (p intersectiontimes qq) < 0:
      thclean qq;
      thdraw qq;
    fi;
        endfor;  
      endfor;
    );
    clip tmp_pic to p;
    draw tmp_pic;
  enddef;


#sable
def a_sands (expr p) =
    T:=identity;
    pickup PenC;
    path q; q = bbox p;
    picture tmp_pic;
    tmp_pic := image(
      for i = xpart llcorner q step 0.1u until xpart urcorner q:
        for j = ypart llcorner q step 0.1u until ypart urcorner q:
          draw origin shifted ((i,j) randomized 0.1u) withpen PenC;
        endfor;
      endfor;
    );
    #clip tmp_pic to p;
    draw tmp_pic;
  enddef;

#pebbles
#def a_pebbles_SKBB (expr p) =
#  T:=identity;
#  pickup PenC;
#  path q, qq; q = bbox p;
#  picture tmp_pic; 
#  tmp_pic := image(
#    for i = xpart llcorner q step .1u until xpart urcorner q:
#      for j = ypart llcorner q step .5u until ypart urcorner q:
#        qq := (superellipse((.07u,0),(0,.03u),(-.07u,0),(0,.-.03u),.75))
#%             randomized (u/25)
#             rotated uniformdeviate(360) 
#             shifted ((i,j) randomized 0.27u);
#	if xpart (p intersectiontimes qq) < 0:
#	  thdraw qq;
#	fi;
#      endfor;  
#    endfor;
#  );
#  clip tmp_pic to p;
#  draw tmp_pic;
#enddef;





#pente
   def l_slope (expr P,S)(text Q) = 
 %show Q;
T:=identity;
numeric dirs[];
numeric lengths[];
for i=Q:
  dirs[redpart i]:=greenpart i;
  lengths[redpart i]:=bluepart i;
endfor;  
li:=length(P); % last
alw_perpendicular:=true;
for i=0 upto li:
  if unknown dirs[i]: dirs[i]:=-1; 
  else: 
    if dirs[i]>-1:
      dirs[i]:=((90-dirs[i]) - angle(thdir(P,i))) mod 360; 
      alw_perpendicular:=false;
    fi;
  fi;
  if unknown lengths[i]: lengths[i]:=-1; fi;
endfor;
  %for i=0 upto li: show dirs[i]; endfor;
ni:=0; % next
pi:=0; % previous
for i=0 upto li:
  d:=dirs[i];
  if d=-1:
    if (i=0) or (i=li):
      dirs[i] := angle(thdir(P,i) rotated 90) mod 360;
pi:=i;
    else:
      if ni<=i:
  for j=i upto li:
          ni:=j;
    exitif dirs[j]>-1;
  endfor;
fi;
w:=arclength(subpath(pi,i) of P) / 
   arclength(subpath(pi,ni) of P);
dirs[i]:=w[dirs[pi],dirs[ni]];
   %        if (dirs[i]-angle(thdir(P,i))) mod 360>180:
   %          dirs[i]:=w[dirs[ni],dirs[pi]];
   %	  message("*******");
   %        fi;
   fi;
  else:
    pi:=i;
  fi;
endfor;
  %for i=0 upto li: show dirs[i]; endfor;
ni:=0; % next
pi:=0; % previous
for i=0 upto li:
  l:=lengths[i];
  if l=-1:
    if (i=0) or (i=li):
      lengths[i] := 1cm; % should never happen!
thwarning("slope width at the end point not specified");
pi:=i;
    else:
      if ni<=i:
  for j=i+1 upto li:
          ni:=j;
    exitif lengths[j]>-1;
  endfor;  
fi;
w:=arclength(subpath(pi,i) of P) /   
   arclength(subpath(pi,ni) of P);
lengths[i]:=w[lengths[pi],lengths[ni]];
pi:=i;
    fi;
  else:
    pi:=i;
  fi;
endfor;
  % for i=0 upto li: show lengths[i]; endfor;
T:=identity;
boolean par;
cas := 0.3u;
krok := 0.7u;
dlzka := (arclength P);
if dlzka>3u: dlzka:=dlzka-0.6u fi;
mojkrok:=adjust_step(dlzka,1.4u) / 5;
pickup PenD;
par := false; 
forever:
  t := arctime cas of P;
  if t mod 1>0:  % not a key point
    w := (arclength(subpath(floor t,t) of P) / 
          arclength(subpath(floor t,ceiling t) of P));
    if alw_perpendicular:
      a := 90;
    else:
      a := w[dirs[floor t],dirs[ceiling t]];
    fi;
    l := w[lengths[floor t],lengths[ceiling t]];
  else:
    if alw_perpendicular:
      a := 90;
    else:
      a:= dirs[t];
    fi; 
    l:=lengths[t];
  fi;    
  a := a + angle(thdir(P,t));    
  thdraw (point t of P) -- 
    ((point t of P) + if par: 0.333 * fi l * unitvector(dir(a)));
  cas := cas + mojkrok;
  par := not par;
  exitif cas > dlzka + .3u + (krok / 3);  % for rounding errors
endfor;
if S = 1: pickup PenC; draw P fi;
   %pickup pencircle scaled 3pt;
   %for i=0 upto li: draw point i of P; endfor;
  enddef; 

   # Pour changer la couleur de l aire Sump
     def a_sump (expr p) =
       T:=identity;
       thfill p withcolor (0.0, 0.0, 0.3);
     enddef;
  
 # Pour changer la couleur de l aire Water    
     def a_water (expr p) =
       T:=identity;
       thfill p withcolor (0.0, 0.0, 0.1);
     enddef;
  
 # Northarrow more funnier !
    def s_northarrow (expr rot) =
     begingroup
       interim defaultscale:=0.7; % scale your north arrow here
       T:=identity scaled defaultscale rotated -rot;
       interim linecap:=squared;
         interim linejoin:=rounded;
      thfill (-.5cm,-.1cm)--(0,2.5cm)--(.5cm,-.1cm)--cycle;
       pickup pencircle scaled (0.08cm * defaultscale);
       thdraw (0,0)--(0,-2.5cm);
       pickup pencircle scaled (0.16cm * defaultscale);
       p:=(0.4cm,0.6cm);
       thdraw ((p--(p yscaled -1)--(p xscaled -1)--(p scaled -1)) shifted (0,-1.0cm));
       label.rt(thTEX("mg") scaled 1.6, (.6cm,-1.6cm)) transformed T;
     endgroup;
   enddef; 
  
 # Echelle
 def s_scalebar (expr l, units, txt) =
     begingroup
       interim warningcheck:=0;
       tmpl:=l / Scale * cm * units / 2;
       tmpx:=l / Scale * cm * units / 5;
       tmph:=5bp; % bar height
     endgroup;
     pickup PenC;
     draw (-tmpl,0)--(tmpl,0)--(tmpl,-tmph)--(-tmpl,-tmph)--cycle;
     p:=(0,0)--(tmpx,0)--(tmpx,-tmph)--(0,-tmph)--cycle;
     for i:=-2.5 step 2 until 2:
       fill p shifted (i * tmpx,0);
     endfor;
     begingroup
       interim labeloffset:=3.5bp;
       for i:=0 step (l/5) until (l-1):
         tmpx:=tmpl * (i * 2 / l - 1);
         label.bot(thTEX(decimal (i)),(tmpx,-tmph));
       endfor;
       label.bot(thTEX(decimal (l) & "\thinspace" & txt) ,(tmpl,-tmph));
       label.top(thTEX("Echelle 1 : " & decimal (Scale*100)),(0,0));
     endgroup;
   enddef;    

  
 # Titre          
     code tex-map
    % Output map title as determined by Therion 5.3 is stored in cavename. 
    % It will be empty if there are multiple maps selected for any one projection
    % AND there are multiple source surveys identified in the thconfig file 
    % ie Therion can not infer a unique title from the input data given.
    % This code allows you to define an output map title {cavename} if it happens to be empty
  
   \edef\temp{\the\cavename}   % cavename from Therion
   \edef\nostring{}            % empty string
   \ifx\temp\nostring          % test if cavename is empty
         % if empty reassign cavename to describe selected maps as a group
 		\cavename={CH22} 		
   \else % if not empty keep the value set by therion, or assign an override cavename here
   \fi
   endcode  

 code metapost
  def p_altitude (expr pos) =
    T:=identity shifted pos;
    pickup PenD;
    p:=(-.3u,0)--(.3u,0);
    thdraw p; thdraw p rotated 90;
    p:=fullcircle scaled .2u;
    thclean p; thdraw p;
  enddef;
  
  vardef p_label@#(expr txt,pos,rot,mode) =
    if mode=1:
      thdrawoptions(withcolor .8red + .4blue);
      p_altitude(pos);
      % append "m" to label
      picture txtm;
      txtm:=image(
        draw txt;
        interim labeloffset:=0;
        label.urt(btex \thaltitude m etex, lrcorner txt);
      );
      % give extra offset in case of l/r/t/b alignment
      pair ctmp;
      ctmp:=center thelabel@#("x", (0,0));
      if (xpart ctmp * ypart ctmp)=0:
        interim labeloffset:=(.4u);
      else: % diagonal alignment
        interim labeloffset:=(.2u);
      fi;
      % draw label
      lab:=thelabel@#(txtm, pos);
      draw lab _thop_; % use color
      thdrawoptions();
      bboxmargin:=0.8bp;
      write_circ_bbox((bbox lab) smoothed 2);
    else:
      if mode=7: interim labeloffset:=(u/8) fi;
      lab:=thelabel@#(txt, pos);
      if mode>1: pickup PenD fi;
      if mode=2: process_uplabel;
      elseif mode=3: process_downlabel;
      elseif mode=4: process_updownlabel;
      elseif mode=5: process_circledlabel;
      elseif mode=6: process_boxedlabel;
      elseif mode=7: process_label(pos,rot);  % station name
      elseif mode=8: process_filledlabel(pos, rot);
      else: process_label(pos,rot); fi;
    fi;
  enddef;
endcode  
  
# For point height with P or C prefixe 
# use “point 0 0 height -value [+10 m]” 
# or “point 0 0 height -value [-85 m]” 
# in your data to get E10 or P85
code mpost
    verbatimtex \def\thheightpos{E}\def\thheightneg{P} etex 
  
 # Pour dessiner un cadre autour de la topo   
 code tex-map
   \framethickness=0.5mm
 endcode
 
endcode

 endlayout
 
  
 #export map -fmt xvi -layout xviexport -o CH22-plan.xvi
 export map -projection extended -fmt xvi -layout xviexport -o CH22-coupe.xvi
 export map -o CH22-plan.pdf -layout my_layout
 export map -projection extended -layout my_layout-coupe -o CH22-coupe.pdf
 export model -o CH22.lox
 # Export des fichiers kml
#export map -proj plan -fmt kml -o CH22.kml -layout my_layout
