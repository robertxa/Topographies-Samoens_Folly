encoding  utf-8
  
  
 # File written by tro2therion.f90 (Xavier Robert) 
  
 # Copyright (C) 2010 Xavier Robert <xavier.robert01@gmail.com>
 # This work is under the GPLv2
  
  
 # 1-SOURCES 
 # La ligne source specifie le fichier ou sont les donnees topo
  # (Au fichier "nomcavite.th" il faudra avoir une ligne
  # "input "nomcavite.th2" pour specifier le fichier ou se trouvent
  # les donnees du dessin, comme ça, ce fichier thconfig appelera 
  # nomcavite.th" et a son tour, "nomcavite.th" appelera
  # "nomcavite.th2")
 source A24.th
 #source A24.th2
  
 # 2-LAYOUT   
 # Debut de la definition du Layout "xviexport"
 layout xviexport
   # echelle a laquelle on veut dessiner la topo
   scale 1 1000
   # taille de la grille
   grid-size 10 10 10 m
   # mettre la grille en arrière plan
   grid bottom
 endlayout
 # fin de la définition du layout "xviexport" 
  
 layout my_layout
  
   # Titre  
   doc-title "A24"
   # Auteur
   doc-author "Xavier Robert"
  
   # Pour faire la topo dans le system UTM  
   # Decommenter la ligne, et remplacer xx par la zone UTM
   cs UTM32
  
   # "base-scale" specifie l echelle auquel nous avons
   # dessine nos croquis. Par defaut, c est 1/200.
   # Si on a utilise une autre echelle, 
   # il faut enlever le "#" et specifier l echelle vraiment
   # employee, c est le cas apres avoir dessine la topo
   # sur un cheminement exporte avec le layout "xviexport"
   # (voir en bas)
   base-scale 1 1000
  
   # "scale" : specification de l echelle,
   # pour imprimer la topo. La combination entre scale et base-scale
   # controlle le gros des lignes, rotation, etc, convenable
   # pour faire l amplificaation-reduction entre dessin et
   # le resultat de l imprimante
   # C est tres important s assurer que la configuration de
   # l imprimante ne specifie pas l option "Fit in page"
   # ou similaire, sinon, l echelle sera change pendant
   # l impression
  scale 1 1000
  
  # Pour faire une rotation
  #rotate 2.25
  
 # origin 12 22 0 m
 # origin-label 100 K
  
   # Une couleur de fond, 85% blanc = 15% noir
  #color map-bg 85
  
   # Une couleur de topo (RVB)
  color map-fg [100 100 80]
  
   # la topo est transparente (on peut voir les galeries sousjacentes)
   # Par defaut, donc, pas vraiment besoin de specifier
  transparency on
  
   # Pourcentage de transparence, marche seulement si transparency est "on"
  opacity 75
  
   # Il faut s exprimer avec la langue de Voltaire...
  language fr
  
   # echelle graphique 100 m ampleur
   scale-bar 100 m
  
   # Un commentaire a ajounter au titule,
  map-comment " plan, Samoëns, 74, France"
  
   # Afficher les statistiques d explo par équipe/nom. C est lourd
   # si la cavite est importante et qu il y a beaucoup d explorateurs
   statistics explo-length off
  
   # Afficher developpement et profondeur de la cavite
  statistics topo-length off
  
   # Nous voulons une legende pour expliquer les symboles. "on" imprimera
   # seulement la legende des symboles dessines sur la topo, si l on veut
   # pour tous les symboles, utilises ou pas, il faut indiquer "all".
   # "legend off" = pas de legende
  legend on
  
   # Par defaut, la legende est de 14 cm de largeur
   #  legend-width 14 cm
  
   # Specification la position de la manchette : interieur
   # occuppe par le titule, auteurs, etc. Nous pouvons indiquer
   # les cordonnes du point de la topo ou l on veut la manchette :
   # 0 0, c est en bas, a gauche
   # 100 100, c est en haut, a droite
   # La manchette a des "points cardinaux" : n, s, ne, sw, etc.
   # Il faut specifier un de ces points 
  map-header 0 00 nw
  
   # arrière plan de la manchette
  map-header-bg off
  
  layers on
  
   # Options pour afficher le squelette topo,
   # les points et le nom des stations topos
  symbol-hide line survey
  #symbol-hide point station DO NOT WORK !
  #debug station-names
  
    symbol-color point water-flow [0 0 100]  symbol-color line water-flow [0 0 100]
  
   # Symbologie: UIS, ASF (Australie) CCNP (Etats Units) ou
   # SKB (tchecoslovakia) 
   #symbol-set UIS
  symbol-assign point station:temporary SKBB
  
  
   # Specifier qu il faut imprimer une grille
   # au dessous de la topo  
 # grid bottom
  
   # Specifier le pas de la grille, ici 100x100x100 metres
   # (Trois dimensions, oui, ça sert pour la coupe aussi) 
 # grid-size 100 100 100 m
   # Si nous ne voulons pas de grille :
   grid off
  
   # Afficher un copyright
   statistics copyright 2
  
  
   # "size", c est pour l atlas. Ce sont les dimensions du carre dont
   # l interieur sera ocuppe par la partie de la topo correspondant a
   # chaque une des pages. 15 x 20, ça va bien pour imprimer en A4.
 #  size 15 20 cm
  
   # Dans l atlas, on superpose 1 cm de chaque page voisine
   overlap 1 cm
  
   # Pour exclure des pages de l atlas :
 # exclude-pages on 1,2,5
  
   # "page-setup" : pour map et pour atlas aussi.
   # On specifie les dimensions de la feuille papier: 21 X 29,7 (A4)
   # la surface imprimable du papier, ce sont 17 X 28,2
   # Alors, on indique une marge a gauche de 3 (21-17-1=3)
   # et une marge en haut de 1,5 (29,7-27,2-1=1,5)
   # en centimetres  
 # page-setup 21 29.7 17 27.2 3 1.5 cm  
  
  
  
  ######## Code Metapost pour modifier l aspect des symboles ####### 
  
     # Modifier l aspect et les données des statistiques de longueur affichees
   #code tex-map
   #     \cavelength{1330\thinspace{}m} 
   #+ 150\thinspace{}m estimes}
   #     \cavedepth{243\thinspace{}m}
   #   endcode  
  
     # Afficher un copyright
   statistics copyright 2
  
     # Taille des blocs : Modifier la taille des blocs en fonction de la taille de la topo
 code metapost
   def a_blocks (expr p) =
     T:=identity;
     pickup PenC;
     path q, qq; q = bbox p;
     picture tmp_pic; 
     uu := max(u, (xpart urcorner q - xpart llcorner q)/100, (ypart urcorner q - ypart     llcorner q)/100);
     tmp_pic := image(
       for i = xpart llcorner q step 1.0uu until xpart urcorner q:
         for j = ypart llcorner q step 1.0uu until ypart urcorner q:
           qq := punked (((-.3uu,-.3uu)--(.3uu,-.3uu)--(.3uu,.3uu)--(-.3uu,.3uu)--cycle) 
          randomized (uu/2))
                rotated uniformdeviate(360)
                shifted ((i,j) randomized 1.0uu);
     if xpart (p intersectiontimes qq) < 0:
       thclean qq;
       thdraw qq;
     fi;
         endfor;  
       endfor;
     );
     clip tmp_pic to p;
     draw tmp_pic;
   enddef;
  
  
 # Metapost codes to change some aspects... 
  
 #  Pour changer l aspect du sable
 def a_sands (expr p) =
     T:=identity;
     pickup PenC;
     path q; q = bbox p;
     picture tmp_pic;
     tmp_pic := image(
       for i = xpart llcorner q step 0.1u until xpart urcorner q:
         for j = ypart llcorner q step 0.1u until ypart urcorner q:
           draw origin shifted ((i,j) randomized 0.1u) withpen PenC;
         endfor;
       endfor;
     );
     #clip tmp_pic to p;
     draw tmp_pic;
   enddef;
  
 # Pour changer l aspect des pebbles
 def a_pebbles_SKBB (expr p) =
   T:=identity;
   pickup PenC;
   path q, qq; q = bbox p;
   picture tmp_pic; 
   tmp_pic := image(
     for i = xpart llcorner q step .1u until xpart urcorner q:
       for j = ypart llcorner q step .5u until ypart urcorner q:
         qq := (superellipse((.07u,0),(0,.03u), (-.07u,0),(0,.-.03u),.75))
 %             randomized (u/25)
              rotated uniformdeviate(360) 
              shifted ((i,j) randomized 0.27u);
 	if xpart (p intersectiontimes qq) < 0:
 	  thdraw qq;
 	fi;
       endfor;  
     endfor;
   );
   clip tmp_pic to p;
   draw tmp_pic;
 enddef;
  
 # Pour changer l aspect des pentes
    def l_slope (expr P,S)(text Q) = 
  %show Q;
 T:=identity;
 numeric dirs[];
 numeric lengths[];
 for i=Q:
   dirs[redpart i]:=greenpart i;
   lengths[redpart i]:=bluepart i;
 endfor;  
 li:=length(P); % last
 alw_perpendicular:=true;
 for i=0 upto li:
   if unknown dirs[i]: dirs[i]:=-1; 
   else: 
     if dirs[i]>-1:
       dirs[i]:=((90-dirs[i]) - angle(thdir(P,i))) mod 360;
       alw_perpendicular:=false;
     fi;
   fi;
   if unknown lengths[i]: lengths[i]:=-1; fi;
 endfor;
   %for i=0 upto li: show dirs[i]; endfor;
 ni:=0; % next
 pi:=0; % previous
 for i=0 upto li:
   d:=dirs[i];
   if d=-1:
     if (i=0) or (i=li):
       dirs[i] := angle(thdir(P,i) rotated 90) mod 360;
 pi:=i;
     else:
       if ni<=i:
   for j=i upto li:
           ni:=j;
     exitif dirs[j]>-1;
   endfor;
 fi;
 w:=arclength(subpath(pi,i) of P) / 
    arclength(subpath(pi,ni) of P);
 dirs[i]:=w[dirs[pi],dirs[ni]];
    %        if (dirs[i]-angle(thdir(P,i))) mod 360>180:
    %          dirs[i]:=w[dirs[ni],dirs[pi]];
    %	  message("*******");
    %        fi;
    fi;
   else:
     pi:=i;
   fi;
 endfor;
   %for i=0 upto li: show dirs[i]; endfor;
 ni:=0; % next
 pi:=0; % previous
 for i=0 upto li:
   l:=lengths[i];
   if l=-1:
     if (i=0) or (i=li):
       lengths[i] := 1cm; % should never happen!
 thwarning("slope width at the end point not specified");
 pi:=i;
     else:
       if ni<=i:
   for j=i+1 upto li:
           ni:=j;
     exitif lengths[j]>-1;
   endfor;  
 fi;
 w:=arclength(subpath(pi,i) of P) /   
    arclength(subpath(pi,ni) of P);
 lengths[i]:=w[lengths[pi],lengths[ni]];
 pi:=i;
     fi;
   else:
     pi:=i;
   fi;
 endfor;
   % for i=0 upto li: show lengths[i]; endfor;
 T:=identity;
 boolean par;
 cas := 0.3u;
 krok := 0.7u;
 dlzka := (arclength P);
 if dlzka>3u: dlzka:=dlzka-0.6u fi;
 mojkrok:=adjust_step(dlzka,1.4u) / 5;
 pickup PenD;
 par := false;
 forever:
   t := arctime cas of P;
   if t mod 1>0:  % not a key point
     w := (arclength(subpath(floor t,t) of P) / 
           arclength(subpath(floor t,ceiling t) of P));
     if alw_perpendicular:
       a := 90;
     else:
       a := w[dirs[floor t],dirs[ceiling t]];
     fi;
     l := w[lengths[floor t],lengths[ceiling t]];
   else:
     if alw_perpendicular:
       a := 90;
     else:
       a:= dirs[t];
     fi; 
     l:=lengths[t];
   fi;    
   a := a + angle(thdir(P,t));    
   thdraw (point t of P) -- 
     ((point t of P) + if par: 0.333 * fi l * unitvector(dir(a)));
   cas := cas + mojkrok;
   par := not par;
   exitif cas > dlzka + .3u + (krok / 3);  % for rounding errors
 endfor;
 if S = 1: pickup PenC; draw P fi;
    %pickup pencircle scaled 3pt;
    %for i=0 upto li: draw point i of P; endfor;
   enddef; 
 # Pour changer la couleur de l aire Sump
     def a_sump (expr p) =
       T:=identity;
       thfill p withcolor (0.0, 0.0, 0.3);
     enddef;
  
 # Pour changer la couleur de l aire Water    
     def a_water (expr p) =
       T:=identity;
       thfill p withcolor (0.0, 0.0, 0.1);
     enddef;
  
 # Northarrow more funnier !
    def s_northarrow (expr rot) =
     begingroup
       interim defaultscale:=0.7; % scale your north arrow here
       T:=identity scaled defaultscale rotated -rot;
       interim linecap:=squared;
         interim linejoin:=rounded;
      thfill (-.5cm,-.1cm)--(0,2.5cm)--(.5cm,-.1cm)--cycle;
       pickup pencircle scaled (0.08cm * defaultscale);
       thdraw (0,0)--(0,-2.5cm);
       pickup pencircle scaled (0.16cm * defaultscale);
       p:=(0.4cm,0.6cm);
       thdraw ((p--(p yscaled -1)--(p xscaled -1)--(p scaled -1)) shifted (0,-1.0cm));
       label.rt(thTEX("mg") scaled 1.6, (.6cm,-1.6cm)) transformed T;
     endgroup;
   enddef; 
  
 # Echelle
 def s_scalebar (expr l, units, txt) =
     begingroup
       interim warningcheck:=0;
       tmpl:=l / Scale * cm * units / 2;
       tmpx:=l / Scale * cm * units / 5;
       tmph:=5bp; % bar height
     endgroup;
     pickup PenC;
     draw (-tmpl,0)--(tmpl,0)--(tmpl,-tmph)--(-tmpl,-tmph)--cycle;
     p:=(0,0)--(tmpx,0)--(tmpx,-tmph)--(0,-tmph)--cycle;
     for i:=-2.5 step 2 until 2:
       fill p shifted (i * tmpx,0);
     endfor;
     begingroup
       interim labeloffset:=3.5bp;
       for i:=0 step (l/5) until (l-1):
         tmpx:=tmpl * (i * 2 / l - 1);
         label.bot(thTEX(decimal (i)),(tmpx,-tmph));
       endfor;
       label.bot(thTEX(decimal (l) & "\thinspace" & txt) ,(tmpl,-tmph));
       label.top(thTEX("Echelle 1 : " & decimal (Scale*100)),(0,0));
     endgroup;
   enddef;    
  
 ## Couleur des fleches d eau (NOT WORKING YET !)
 #def p_water-flow (expr p) =
 #    pickup PenC;
 #    draw p withcolor (0.1, 0.2, 0.8);
 #  enddef;
  
 # Titre          
     code tex-map
    % Output map title as determined by Therion 5.3 is stored in cavename. 
    % It will be empty if there are multiple maps selected for any one projection
    % AND there are multiple source surveys identified in the thconfig file 
    % ie Therion can not infer a unique title from the input data given.
    % This code allows you to define an output map title {cavename} if it happens to be empty
  
   \edef\temp{\the\cavename}   % cavename from Therion
   \edef\nostring{}            % empty string
   \ifx\temp\nostring          % test if cavename is empty
         % if empty reassign cavename to describe selected maps as a group
 		\cavename={} 		
   \else % if not empty keep the value set by therion, or assign an override cavename here
   \fi
   endcode  
  
 ## Pour changer la longeur et la profondeur   
 # code tex-map
 #      \topoteam{Your team.}
 #      \cavelength{1000\thinspace{}ft}
 #      \cavedepth{300\thinspace{}m}
 #  endcode                 
  
 ## Pour modifier le Header
 #code tex-map  
 #    \cavename={Gouffre Jean-Bernard}
 #    \topotitle={Topographie par}
 #    \cartotitle={Dessin par}
 #    \explotitle={Exploration par}  
 #  endcode
  
 # Pour mettre 2 headers     
 # code tex-map
 #    \def\maplayout{
 #      \legendbox{0}{100}{NW}{\northarrow\scalebar}
 #      \legendbox{100}{100}{NW}{\scalebar}
 #    }
 #  endcode
  
 # Pour dessiner un cadre autour de la topo   
 code tex-map
   \framethickness=0.5mm
 endcode
  
 ######################### 
  
 endlayout
  
 # 3-EXPORTS   
 export map -fmt xvi -layout xviexport -o A24-map.xvi
 export map -projection extended -fmt xvi -layout xviexport -o A24-coupe.xvi
  
 export map -o A24-plan.pdf -layout my_layout
 export map -projection extended -layout my_layout -o A24-coupe.pdf
 export model -o A24.lox
  
 # Export des fichiers ESRI
 export map -proj plan -fmt esri -o A24 -layout my_layout
  
 # Export des fichiers kml
 export map -proj plan -fmt kml -o A24.kml -layout my_layout
